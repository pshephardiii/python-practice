Python Notes:

Declaring variables:
count = 4
## Don't need a declaration term, like let or const!
Assignment: same deal

name rules:
- variables must start with letter or underscore
- From second character onwards, you can also use numbers

operators:
// is floor division... rounds result down to closest whole number
something like a **= b assigns to a the result of a raised to the power of b

for loop syntax: it's basically a for in loop
for val in sequence:
    #Body of for

Range() function - print all numbers from 1 to 9 (end not inclusive)
for i in range(1,10):
    print(i)

help(range) ## the help function prints info about the function

For i in range(1, 100, 25): the third number is a step count, so it will print 1, then 26, then 51, then 76

*** indentation is required in python!!

f-strings:
- formatted string literals
ex. 
for i in range(1, 11):
    print(f"5 * {i} = {5 * i}")
- above will return multiplication table for 5
(5 * 1 = 5, 5 * 2 = 10, 5 * 3 - 15, etc.)

Nested Loops: same thing as JS with Python syntax

FUNCTIONS:

- define function using def keyword
- return key word still used to return values

function can be given default values
- ex: def print_string(str="Hello World", no_of_times=5): ...
Use the equal sign to set default value in parameter space


Pass - keyword used as a placeholder (non-operation) in a function to be replaced later

DATA TYPES:

to check data type:
print(type(whatever))

*** division always results in a float, even if it's a whole number

*** decimal data type is more accurate than float
- using decimal class requires the decimal module
import decimal
from decimal import Decimal

Booleans: must be capitalized: True and False

NOTE: loose equality is not a thing in Python!
- the == operator works as strict equality

CONDITIONALS

syntax:
i = 5
if i > 3:
    Blah....

elif is the keyword for else if

Logical operators:
- spelled out... and, or, not 
- Logical (XOR) Operator... ^
Return True if both sides have opposite Boolean values (basically a negated biconditional... exclusive or)
- != can be used as a negated equality

None - keyword for null

ASSIGNMENT CONVENTION:
if you want to do the following in one line:
a = 1
b = 2
Do this:
a, b = 1, 2

STRINGS 

.lower: lower cases all of string
.upper: upper cases all of string
.capitalize: capitalizes first letter of string 

Boolean checks:
.islower()
.isupper()
.istitle()

check if only digits in string: .isdigit
check if only alphabets in string: .isalpha
check if all alphanumeric: .isalnum

check if string ends with a particular character or set of characters: .endswith
- same for start: .startswith

find specific index of where a substring begins within a string: longerStr.find(subStr)... seems to return first instance of substring
- returns -1 if substring isn't present

Boolean check for presence of substring: subStr in longerStr

Can access specific characters using indexing, like str[0]
- can iterate with loops...
for ch in str:
    blah blah blah

string module (IMPORTANT)
need to import first: import string
- check out the lab on this... you can print out all lower case alphabets, all digits, all punctuation, etc.

comparisons using < and > determined by ASCII value of characters
- use ord(char) to check the ASCII value
With strings, the comparison starts with the first characters' ASCII value, and if those are the same, then they compare the second, and so on.

Check string length: len(str)

Reverse text: reversed(str)

print(str * 3) --- prints str three times 

OBJECT ORIENTED PROGRAMMING

Defining class -- class Class_Name:
blah
- to instatiate: object_name = Class_Name()
- add attributes: object_name.attribute_name(attribute_value)
- ex. india.name('India')
Access attributes: print(object_name.attribute_name)

Class constructor:
def __init__(self):
Ex.
class MotorBike:
    def __init__(self, speed):
        self.speed = speed
honda = MotorBike(50)

Default values:
Ex.
class MotorBike:
    def __init__(self, speed=50):

- Best practice: define and initialize all instance attributes in the constructor
Ex: 
class Planet:
    def __init__(self, name="Earth"):
        self.name = name
        self.speed = 10
        self.distance_from_sun = 10000

METHODS

Ex.
class MotorBike:
    def __init__(self, speed=50):
        self.speed = speed
    def increase_speed(self, how_much):
        self.speed += how_much

honda.increase_speed(150)

LISTS

.append(element) -- adds element to end of list
.insert(index, element) -- adds element to index position
.remove(element) -- removes first instance of element from list
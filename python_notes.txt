Python Notes:

Declaring variables:
count = 4
## Don't need a declaration term, like let or const!
Assignment: same deal

name rules:
- variables must start with letter or underscore
- From second character onwards, you can also use numbers

operators:
// is floor division... rounds result down to closest whole number
something like a **= b assigns to a the result of a raised to the power of b

for loop syntax: it's basically a for in loop
for val in sequence:
    #Body of for

Range() function - print all numbers from 1 to 9 (end not inclusive)
for i in range(1,10):
    print(i)

help(range) ## the help function prints info about the function

For i in range(1, 100, 25): the third number is a step count, so it will print 1, then 26, then 51, then 76

*** indentation is required in python!!

f-strings:
- formatted string literals
ex. 
for i in range(1, 11):
    print(f"5 * {i} = {5 * i}")
- above will return multiplication table for 5
(5 * 1 = 5, 5 * 2 = 10, 5 * 3 - 15, etc.)

Nested Loops: same thing as JS with Python syntax

FUNCTIONS:

- define function using def keyword
- return key word still used to return values

function can be given default values
- ex: def print_string(str="Hello World", no_of_times=5): ...
Use the equal sign to set default value in parameter space


Pass - keyword used as a placeholder (non-operation) in a function to be replaced later

DATA TYPES:

to check data type:
print(type(whatever))

*** division always results in a float, even if it's a whole number

*** decimal data type is more accurate than float
- using decimal class requires the decimal module
import decimal
from decimal import Decimal

Booleans: must be capitalized: True and False

NOTE: loose equality is not a thing in Python!
- the == operator works as strict equality

CONDITIONALS

syntax:
i = 5
if i > 3:
    Blah....

elif is the keyword for else if

Logical operators:
- spelled out... and, or, not 
- Logical (XOR) Operator... ^
Return True if both sides have opposite Boolean values (basically a negated biconditional... exclusive or)
- != can be used as a negated equality

None - keyword for null




Python Notes:

Declaring variables:
count = 4
## Don't need a declaration term, like let or const!
Assignment: same deal

name rules:
- variables must start with letter or underscore
- From second character onwards, you can also use numbers

operators:
// is floor division... rounds result down to closest whole number
something like a **= b assigns to a the result of a raised to the power of b

for loop syntax: it's basically a for in loop
for val in sequence:
    #Body of for

Range() function - print all numbers from 1 to 9 (end not inclusive)
for i in range(1,10):
    print(i)

help(range) ## the help function prints info about the function

For i in range(1, 100, 25): the third number is a step count, so it will print 1, then 26, then 51, then 76

*** indentation is required in python!!

f-strings:
- formatted string literals
ex. 
for i in range(1, 11):
    print(f"5 * {i} = {5 * i}")
- above will return multiplication table for 5
(5 * 1 = 5, 5 * 2 = 10, 5 * 3 - 15, etc.)

Nested Loops: same thing as JS with Python syntax

FUNCTIONS:

- define function using def keyword
- return key word still used to return values

function can be given default values
- ex: def print_string(str="Hello World", no_of_times=5): ...
Use the equal sign to set default value in parameter space


Pass - keyword used as a placeholder (non-operation) in a function to be replaced later

DATA TYPES:

to check data type:
print(type(whatever))

*** division always results in a float, even if it's a whole number

*** decimal data type is more accurate than float
- using decimal class requires the decimal module
import decimal
from decimal import Decimal

Booleans: must be capitalized: True and False

NOTE: loose equality is not a thing in Python!
- the == operator works as strict equality

CONDITIONALS

syntax:
i = 5
if i > 3:
    Blah....

elif is the keyword for else if

Logical operators:
- spelled out... and, or, not 
- Logical (XOR) Operator... ^
Return True if both sides have opposite Boolean values (basically a negated biconditional... exclusive or)
- != can be used as a negated equality

None - keyword for null

ASSIGNMENT CONVENTION:
if you want to do the following in one line:
a = 1
b = 2
Do this:
a, b = 1, 2

STRINGS 

.lower: lower cases all of string
.upper: upper cases all of string
.capitalize: capitalizes first letter of string 

Boolean checks:
.islower()
.isupper()
.istitle()

check if only digits in string: .isdigit
check if only alphabets in string: .isalpha
check if all alphanumeric: .isalnum

check if string ends with a particular character or set of characters: .endswith
- same for start: .startswith

find specific index of where a substring begins within a string: longerStr.find(subStr)... seems to return first instance of substring
- returns -1 if substring isn't present

Boolean check for presence of substring: subStr in longerStr

Can access specific characters using indexing, like str[0]
- can iterate with loops...
for ch in str:
    blah blah blah

string module (IMPORTANT)
need to import first: import string
- check out the lab on this... you can print out all lower case alphabets, all digits, all punctuation, etc.

comparisons using < and > determined by ASCII value of characters
- use ord(char) to check the ASCII value
With strings, the comparison starts with the first characters' ASCII value, and if those are the same, then they compare the second, and so on.

Check string length: len(str)

Reverse text: reversed(str)

print(str * 3) --- prints str three times 

OBJECT ORIENTED PROGRAMMING

Defining class -- class Class_Name:
blah
- to instatiate: object_name = Class_Name()
- add attributes: object_name.attribute_name(attribute_value)
- ex. india.name('India')
Access attributes: print(object_name.attribute_name)

Class constructor:
def __init__(self):
Ex.
class MotorBike:
    def __init__(self, speed):
        self.speed = speed
honda = MotorBike(50)

Default values:
Ex.
class MotorBike:
    def __init__(self, speed=50):

- Best practice: define and initialize all instance attributes in the constructor
Ex: 
class Planet:
    def __init__(self, name="Earth"):
        self.name = name
        self.speed = 10
        self.distance_from_sun = 10000

METHODS

Ex.
class MotorBike:
    def __init__(self, speed=50):
        self.speed = speed
    def increase_speed(self, how_much):
        self.speed += how_much

honda.increase_speed(150)

LISTS

.append(element) -- adds element to end of list
.insert(index, element) -- adds element to index position
.remove(element) -- removes first instance of element from list

check if in list:
element in list -- boolean
---- index function 
list.index(element) -- outputs index number of element

remove element at index - del animals[index]
adding elements:
list.extend([val1, val2...])
list += [val1, val2 ...]
* Above add to end
- if only one value, use append()

IMPORTANT: index -1 refers to last item, -2 second to last item, etc.

sort by length: sorted(list, key = len)
in reverse: sortby(list, key = len, reverse = True)

*** if you don't want to modify original list, you can use for loop to iterate like so
for item in sorted(list):
    blah

2D LISTS:

initalizing... you can just create individual lists then put them all in a larger list.
Or you can use nested for-loops.
Ex.
rows, cols = 3, 4
two_d_list = []
for i in range(rows):
    row = []
    for j in range(cols):
        row.append(i * 10 + j)
    two_d_list.append(row)

traversing:
Ex.
print("2D list traversal:")
for i in range(rows):
    for j in range(cols):
        print(two_d_list[i][j], end=' ')
    print()  

ASCII:
- find value for character: ord(char)
- find character for value: chr(val)

If you want to sort a list of objects by some attribute, need at top: from operator import attrgetter

Variable arguments syntax --
def function_name(*args):
    blah

Find index alphabet value for a character:
string.ascii_lowercase.index('z')
Ex. this would output 25, 'a' would output 0, etc.

ADVANCE OOP

Method within class used to show attributes when printed:
def __repr__(self):
    return repr( (attributes_listed_here with self) )

Composition:

Combining simple classes to create more complex ones
ex. book class containing multiple review objects
- you'd create a method for adding reviews to the book, but the reviews themselves are instances of a separate review class

Inheritance:

One subclass inherits properties from superclass (pretty sure Bax attacks works this way!)

Creating a subclass: 
ex. class Pet (Animal):
    blah

Inherits things from constructor and methods (including repr)

You can have a class inherit from two superclasses
ex. class Amphibian(WaterAnimal, LandAnimal):
    blah

superclass constructor:

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def __repr__(self):
        return repr( (self.length, self.width) )

    def area(self):
        return self.length * self.width

class Square(Rectangle):
    def __init__(self, length):
        super().__init__(length, length)

Abstract Classes:

acts as a blueprint for other classes
--- at top:
from abc import ABC, abstractmethod

ex.
class AbstractAnimal(ABC):

    @abstractmethod
    def bark(self): pass

class Dog(AbstractAnimal):

    def bark(self):
        print("Bow Wow")

Template Method Pattern:
- using abstract methods to serve as steps for an algorithm
- execute method shows the order with which methods should be called

ex.

class Abstractrecipe(ABC):

    def execute(self):
        self.prepare()
        self.recipe()
        self.cleanup()

    @abstractmethod
    def prepare(self): pass

    @abstractmethod
    def recipe(self): pass

    @abstractmethod
    def cleanup(self): pass

class Recipe1(AbstractRecipe):

    def prepare(self):
        print('do the dishes')
        print('get raw materials')

    def recipe(self):
        print('execute the steps')
    
    def cleanup(self): pass

Recipe1().execute() 
--- this will trigger all of the methods outlined in the execute function of the abstract class in the correct order... don't need to call the methods individually

Polymorphism:

- many forms... 
- same code to call different methods/functions (see polymorphism vid for example)

MORE ON LISTS:

Slice:
Access elements 2 - 6 -- list[2:7] -- second number non-inclusive
- if you leave out first number, starts from index 0 and goes to second... if you leave out second, starts at first and goes to end of list
- if you want to fetch every third element:
list[::3] -- will fetch index 0 if no start value is given
- reverse list with negative third number
Ex. list[::-1] will give you entire list in reverse direction

Delete using slice:
ex. del list[1:3] -- deletes index 1 and 2

Replace using slice:
ex. list[3:7] = [3, 4, 5, 6] -- replaces index 3-6 with the new values

DATA STRUCTURES:

Stack: last in, first out data structure
Use list to implement stack (append function)
pop() removes last element

Look at last element: list[-1]

Check if empty: print(not bool(numbers))

creating a stack class:

class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def is_empty(self):
        return len(self.items) == 0
    
    def pop(self):
        if not self.is_empty()
            return self.items.pop()
    
    def top(self):
        if not self.is_empty():
            return self.items[-1]
        
    def display(self):
        print(self.items)

QUEUE: first in, first out

add to rear of queue: list.append(item)

remove from front: list.pop(0)

Create a queue class:

class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.append(item)

    def is_empty(self):
        return len(self.items) == 0

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)

    def front(self):
        if not self.is_empty():
            return self.items[0]

    def display(self):
        print(self.items)

LIST COMPREHENSION

easy way to make lists

To create a new list containing the length of each element:

numbers_length_four = [len(number) for number in numbers]

To create a new list containing only elements of a specified length:

numbers_length_four = [number for number in numbers if len(number) == 4]

Error Handling:

import builtins
help(builtins.NameOfError)

^^^ helps give further information on different kinds of errors

try and except:
- it's basically a try/catch block

try:
    blah
except:
    blah

You can have multiple except blocks:

Ex.

try:
    blah
except TypeError:
    blah
except ZeroDivisionError:
    blah

*** use the name of the specific Python errors... you can only use classes that inherit from BaseException

You can catch multiple exceptions in a single block:
except (ZeroDivisionError, TypeError):

Print out more info on the error:

except TypeError as error:
    print(error)

try:
    blah
except:
    blah
*** What you want to happen if exception doesn't occur vvv
else:
    blah
*** What you want to happen regardless of whether exception runs or not
finally:
    blah

Adding an exception in a class:

class Currency:

blah blah blah...

def __add_(self, other):
    if self.currency != other.currency:
        raise Exception("Currencies Do Not Match")
    
    blah blah blah...

Custom Exception Class:

class CurrenciesDoNotMatchError(Exception): 
    def __init_(self, message):
    super().__init__(message)

SETS:

A set cannot contain duplicates (unique values only)

numbers_set = {1, 2, 3, 4}

you can convert a list into a set:
numbers = [1, 2, 3, 2, 1]
numbers_set = set(numbers)
numbers_set will then be : {1, 2, 3}

numbers_set.add(4)
numbers_set will then be : {1, 2, 3, 4}

numbers_set.remove(1)
numbers_set will then be : {2, 3, 4}

sets do not support access using index ***

check if element is in set:
print(element_name in set)

ex. print(2 in numbers_set)

Aggregate functions like min, max, sum, and len can be performed on sets

Union:

used to add all elements from two sets into a single list
ex. set3 = set1 | set2
or
ex. set4 = set1 | set2 | set3

Intersection:

used to find common elements
set1 = {1, 2, 3}
set2 = {2, 3, 4}
set3 = set1 & set2
result: set3 = {2, 3}
** can find common values across two or more sets 

Subtraction:

Finds elements that are in the first set and not the second:
set1 = {1, 2, 3}
set2 = {2, 3, 4}
set3 = set1 - set2
set3 = {1}
If instead ****
set3 = set2 - set1
set3 = {4}
*** to get all elements unique to each, do this:
set3 = (set1 - set2) | (set2 - set1)

Set vs List:

- set does not allow duplicates
- set does not maintain any specific order of elements
- set cannot be accessed by index
- set declared with {}

Unpacking:

ex. 
def print_values(num1, num2, num3):
    print(num1)
    print(num2)
    print(num3)

scores = [1, 2, 3]

print_values(*scores)
- will print them as integers instead of elements of a list or set

*** Check the puzzles exercise for some more interesting stuff!

get common elements in strings:
string_1 = "hello"
string_2 = "world"
 
result = set(string_1) | set(string_2)
print(result)
result = {'e', 'w', 'r', 'o', 'h', 'd', 'l'}

DICTIONARY:

dict contains key-value pairs (sounds like JS objects)

occurances = dict(a=5, b=6, c=8)
or
occurances = {'a' : 5, 'b' : 6, 'c' : 8}

add new -- occurances['d'] = 15

*** if you try to access a non-existent key, you'll get an error
- to avoid, use the get() method, providing a default value if needed
ex. print(occurances.get('e', 10)) -- 10 is the default value

print(occurances.keys())
-- prints keys
print(occurances.values())
- prints values
print(occurances.items())
-- prints the pairs

to delete:
del occurances['a']

example of frequency counter:
text = "hello"
char_count = {}
for char in text:
    if char in char_count:
        char_count[char] += 1
    else:
        char_count[char] = 1
print(char_count)

example of creating a new dict from set keys and values:
keys = ['a', 'b', 'c']
values = [1, 2, 3]
result = {k: v for k, v in zip(keys, values)}
print(result)

example of creating a dict with original value as key and squared value as value:
squares = {x: x**2 for x in range(1, 6)}
print(squares)


TUPLES:

tuples are immutable

def create_my_tuple():
    return 'Ranga', 1981, 'India'

my_tuple = create_my_tuple()

destructuring tuple:
name, year, country = my_tuple

--- can be accessed with indexing ex. print(my_tuple[0])
nested tuples handle like dicts in this regard

Tuple vs List:

- Tuple is immutable
- Tuples can be more memory-efficient and faster in certain situations
- Tuples often used to represent a single set of related attributes or a record
